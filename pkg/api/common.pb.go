// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: proto/common.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status represents the result of an NFS operation
type Status int32

const (
	Status_OK              Status = 0     // Success
	Status_ERR_PERM        Status = 1     // Not owner
	Status_ERR_NOENT       Status = 2     // No such file or directory
	Status_ERR_IO          Status = 5     // I/O error
	Status_ERR_NXIO        Status = 6     // No such device or address
	Status_ERR_ACCES       Status = 13    // Permission denied
	Status_ERR_EXIST       Status = 17    // File exists
	Status_ERR_NODEV       Status = 19    // No such device
	Status_ERR_NOTDIR      Status = 20    // Not a directory
	Status_ERR_ISDIR       Status = 21    // Is a directory
	Status_ERR_INVAL       Status = 22    // Invalid argument
	Status_ERR_FBIG        Status = 27    // File too large
	Status_ERR_NOSPC       Status = 28    // No space left on device
	Status_ERR_ROFS        Status = 30    // Read-only file system
	Status_ERR_NAMETOOLONG Status = 63    // Filename too long
	Status_ERR_NOTEMPTY    Status = 66    // Directory not empty
	Status_ERR_DQUOT       Status = 69    // Disk quota exceeded
	Status_ERR_STALE       Status = 70    // Stale file handle
	Status_ERR_BADHANDLE   Status = 10001 // Illegal NFS file handle
	Status_ERR_NOT_SYNC    Status = 10002 // Update synchronization mismatch
	Status_ERR_BAD_COOKIE  Status = 10003 // READDIR or READDIRPLUS cookie is stale
	Status_ERR_NOTSUPP     Status = 10004 // Operation not supported
	Status_ERR_TOOSMALL    Status = 10005 // Buffer or request is too small
	Status_ERR_SERVERFAULT Status = 10006 // Server fault
	Status_ERR_BADTYPE     Status = 10007 // Type not supported
	Status_ERR_JUKEBOX     Status = 10008 // Delay; operation requires human intervention
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:     "OK",
		1:     "ERR_PERM",
		2:     "ERR_NOENT",
		5:     "ERR_IO",
		6:     "ERR_NXIO",
		13:    "ERR_ACCES",
		17:    "ERR_EXIST",
		19:    "ERR_NODEV",
		20:    "ERR_NOTDIR",
		21:    "ERR_ISDIR",
		22:    "ERR_INVAL",
		27:    "ERR_FBIG",
		28:    "ERR_NOSPC",
		30:    "ERR_ROFS",
		63:    "ERR_NAMETOOLONG",
		66:    "ERR_NOTEMPTY",
		69:    "ERR_DQUOT",
		70:    "ERR_STALE",
		10001: "ERR_BADHANDLE",
		10002: "ERR_NOT_SYNC",
		10003: "ERR_BAD_COOKIE",
		10004: "ERR_NOTSUPP",
		10005: "ERR_TOOSMALL",
		10006: "ERR_SERVERFAULT",
		10007: "ERR_BADTYPE",
		10008: "ERR_JUKEBOX",
	}
	Status_value = map[string]int32{
		"OK":              0,
		"ERR_PERM":        1,
		"ERR_NOENT":       2,
		"ERR_IO":          5,
		"ERR_NXIO":        6,
		"ERR_ACCES":       13,
		"ERR_EXIST":       17,
		"ERR_NODEV":       19,
		"ERR_NOTDIR":      20,
		"ERR_ISDIR":       21,
		"ERR_INVAL":       22,
		"ERR_FBIG":        27,
		"ERR_NOSPC":       28,
		"ERR_ROFS":        30,
		"ERR_NAMETOOLONG": 63,
		"ERR_NOTEMPTY":    66,
		"ERR_DQUOT":       69,
		"ERR_STALE":       70,
		"ERR_BADHANDLE":   10001,
		"ERR_NOT_SYNC":    10002,
		"ERR_BAD_COOKIE":  10003,
		"ERR_NOTSUPP":     10004,
		"ERR_TOOSMALL":    10005,
		"ERR_SERVERFAULT": 10006,
		"ERR_BADTYPE":     10007,
		"ERR_JUKEBOX":     10008,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_proto_common_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{0}
}

// FileType represents the type of a file
type FileType int32

const (
	FileType_REGULAR   FileType = 0 // Regular file
	FileType_DIRECTORY FileType = 1 // Directory
	FileType_SYMLINK   FileType = 2 // Symbolic link
	FileType_BLOCK     FileType = 3 // Block special device
	FileType_CHAR      FileType = 4 // Character special device
	FileType_FIFO      FileType = 5 // Named pipe
	FileType_SOCKET    FileType = 6 // Socket
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "REGULAR",
		1: "DIRECTORY",
		2: "SYMLINK",
		3: "BLOCK",
		4: "CHAR",
		5: "FIFO",
		6: "SOCKET",
	}
	FileType_value = map[string]int32{
		"REGULAR":   0,
		"DIRECTORY": 1,
		"SYMLINK":   2,
		"BLOCK":     3,
		"CHAR":      4,
		"FIFO":      5,
		"SOCKET":    6,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_common_proto_enumTypes[1].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_proto_common_proto_enumTypes[1]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{1}
}

// Credentials represents the authentication credentials of a client
type Credentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint32                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                   // User ID
	Gid           uint32                 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`                                   // Primary group ID
	Groups        []uint32               `protobuf:"varint,3,rep,packed,name=groups,proto3" json:"groups,omitempty"`                      // Supplementary group IDs
	MachineName   string                 `protobuf:"bytes,4,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"` // Client hostname
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	mi := &file_proto_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{0}
}

func (x *Credentials) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Credentials) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Credentials) GetGroups() []uint32 {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Credentials) GetMachineName() string {
	if x != nil {
		return x.MachineName
	}
	return ""
}

// FileTime represents a file timestamp
type FileTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int64                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"` // Seconds since epoch
	Nano          int32                  `protobuf:"varint,2,opt,name=nano,proto3" json:"nano,omitempty"`       // Nanoseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTime) Reset() {
	*x = FileTime{}
	mi := &file_proto_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTime) ProtoMessage() {}

func (x *FileTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTime.ProtoReflect.Descriptor instead.
func (*FileTime) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{1}
}

func (x *FileTime) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *FileTime) GetNano() int32 {
	if x != nil {
		return x.Nano
	}
	return 0
}

// FileAttributes contains the attributes of a file
type FileAttributes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          FileType               `protobuf:"varint,1,opt,name=type,proto3,enum=nfs.FileType" json:"type,omitempty"`          // File type
	Mode          uint32                 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`                            // Permission bits
	Nlink         uint32                 `protobuf:"varint,3,opt,name=nlink,proto3" json:"nlink,omitempty"`                          // Number of hard links
	Uid           uint32                 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`                              // User ID of owner
	Gid           uint32                 `protobuf:"varint,5,opt,name=gid,proto3" json:"gid,omitempty"`                              // Group ID of owner
	Size          uint64                 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                            // File size in bytes
	Used          uint64                 `protobuf:"varint,7,opt,name=used,proto3" json:"used,omitempty"`                            // Bytes actually used by file
	RdevMajor     uint32                 `protobuf:"varint,8,opt,name=rdev_major,json=rdevMajor,proto3" json:"rdev_major,omitempty"` // Device ID major component
	RdevMinor     uint32                 `protobuf:"varint,9,opt,name=rdev_minor,json=rdevMinor,proto3" json:"rdev_minor,omitempty"` // Device ID minor component
	Fsid          uint64                 `protobuf:"varint,10,opt,name=fsid,proto3" json:"fsid,omitempty"`                           // File system ID
	Fileid        uint64                 `protobuf:"varint,11,opt,name=fileid,proto3" json:"fileid,omitempty"`                       // File ID (inode number)
	Atime         *FileTime              `protobuf:"bytes,12,opt,name=atime,proto3" json:"atime,omitempty"`                          // Last access time
	Mtime         *FileTime              `protobuf:"bytes,13,opt,name=mtime,proto3" json:"mtime,omitempty"`                          // Last modification time
	Ctime         *FileTime              `protobuf:"bytes,14,opt,name=ctime,proto3" json:"ctime,omitempty"`                          // Last status change time
	Blksize       uint32                 `protobuf:"varint,15,opt,name=blksize,proto3" json:"blksize,omitempty"`                     // Preferred block size
	Blocks        uint32                 `protobuf:"varint,16,opt,name=blocks,proto3" json:"blocks,omitempty"`                       // Number of blocks allocated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileAttributes) Reset() {
	*x = FileAttributes{}
	mi := &file_proto_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAttributes) ProtoMessage() {}

func (x *FileAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAttributes.ProtoReflect.Descriptor instead.
func (*FileAttributes) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{2}
}

func (x *FileAttributes) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_REGULAR
}

func (x *FileAttributes) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileAttributes) GetNlink() uint32 {
	if x != nil {
		return x.Nlink
	}
	return 0
}

func (x *FileAttributes) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileAttributes) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *FileAttributes) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileAttributes) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *FileAttributes) GetRdevMajor() uint32 {
	if x != nil {
		return x.RdevMajor
	}
	return 0
}

func (x *FileAttributes) GetRdevMinor() uint32 {
	if x != nil {
		return x.RdevMinor
	}
	return 0
}

func (x *FileAttributes) GetFsid() uint64 {
	if x != nil {
		return x.Fsid
	}
	return 0
}

func (x *FileAttributes) GetFileid() uint64 {
	if x != nil {
		return x.Fileid
	}
	return 0
}

func (x *FileAttributes) GetAtime() *FileTime {
	if x != nil {
		return x.Atime
	}
	return nil
}

func (x *FileAttributes) GetMtime() *FileTime {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *FileAttributes) GetCtime() *FileTime {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *FileAttributes) GetBlksize() uint32 {
	if x != nil {
		return x.Blksize
	}
	return 0
}

func (x *FileAttributes) GetBlocks() uint32 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

var File_proto_common_proto protoreflect.FileDescriptor

var file_proto_common_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6e, 0x66, 0x73, 0x22, 0x6c, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6e,
	0x6f, 0x22, 0xb4, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x64, 0x65, 0x76, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x64, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x73, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x73, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x66,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2a, 0xad, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x52, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52,
	0x5f, 0x4e, 0x4f, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x52, 0x5f,
	0x49, 0x4f, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x58, 0x49, 0x4f,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x10,
	0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x11,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x56, 0x10, 0x13, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x44, 0x49, 0x52, 0x10, 0x14, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x53, 0x44, 0x49, 0x52, 0x10, 0x15, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x10, 0x16, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x42, 0x49, 0x47, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x53, 0x50, 0x43, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52,
	0x52, 0x5f, 0x52, 0x4f, 0x46, 0x53, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x54, 0x4f, 0x4f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x3f, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x42, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x51, 0x55, 0x4f, 0x54, 0x10, 0x45, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x46, 0x12, 0x12, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x91,
	0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x92, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x93, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x52, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x55, 0x50, 0x50, 0x10, 0x94, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x45,
	0x52, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x95, 0x4e, 0x12, 0x14,
	0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x96, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x97, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x5f, 0x4a, 0x55,
	0x4b, 0x45, 0x42, 0x4f, 0x58, 0x10, 0x98, 0x4e, 0x2a, 0x5e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x52,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x06, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x6e,
	0x66, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_common_proto_rawDescOnce sync.Once
	file_proto_common_proto_rawDescData []byte
)

func file_proto_common_proto_rawDescGZIP() []byte {
	file_proto_common_proto_rawDescOnce.Do(func() {
		file_proto_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_common_proto_rawDesc), len(file_proto_common_proto_rawDesc)))
	})
	return file_proto_common_proto_rawDescData
}

var file_proto_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_common_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_common_proto_goTypes = []any{
	(Status)(0),            // 0: nfs.Status
	(FileType)(0),          // 1: nfs.FileType
	(*Credentials)(nil),    // 2: nfs.Credentials
	(*FileTime)(nil),       // 3: nfs.FileTime
	(*FileAttributes)(nil), // 4: nfs.FileAttributes
}
var file_proto_common_proto_depIdxs = []int32{
	1, // 0: nfs.FileAttributes.type:type_name -> nfs.FileType
	3, // 1: nfs.FileAttributes.atime:type_name -> nfs.FileTime
	3, // 2: nfs.FileAttributes.mtime:type_name -> nfs.FileTime
	3, // 3: nfs.FileAttributes.ctime:type_name -> nfs.FileTime
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_common_proto_init() }
func file_proto_common_proto_init() {
	if File_proto_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_common_proto_rawDesc), len(file_proto_common_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_common_proto_goTypes,
		DependencyIndexes: file_proto_common_proto_depIdxs,
		EnumInfos:         file_proto_common_proto_enumTypes,
		MessageInfos:      file_proto_common_proto_msgTypes,
	}.Build()
	File_proto_common_proto = out.File
	file_proto_common_proto_goTypes = nil
	file_proto_common_proto_depIdxs = nil
}
