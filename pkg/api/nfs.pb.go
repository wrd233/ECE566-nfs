// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: proto/nfs.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateMode represents the file creation mode
type CreateMode int32

const (
	CreateMode_UNCHECKED CreateMode = 0 // Create file, overwrite if exists
	CreateMode_GUARDED   CreateMode = 1 // Create file, error if exists
	CreateMode_EXCLUSIVE CreateMode = 2 // Create file only if it does not exist
)

// Enum value maps for CreateMode.
var (
	CreateMode_name = map[int32]string{
		0: "UNCHECKED",
		1: "GUARDED",
		2: "EXCLUSIVE",
	}
	CreateMode_value = map[string]int32{
		"UNCHECKED": 0,
		"GUARDED":   1,
		"EXCLUSIVE": 2,
	}
)

func (x CreateMode) Enum() *CreateMode {
	p := new(CreateMode)
	*p = x
	return p
}

func (x CreateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_nfs_proto_enumTypes[0].Descriptor()
}

func (CreateMode) Type() protoreflect.EnumType {
	return &file_proto_nfs_proto_enumTypes[0]
}

func (x CreateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateMode.Descriptor instead.
func (CreateMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{0}
}

// GetAttrRequest is used to get file attributes
type GetAttrRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHandle    []byte                 `protobuf:"bytes,1,opt,name=file_handle,json=fileHandle,proto3" json:"file_handle,omitempty"` // File handle
	Credentials   *Credentials           `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`                 // Authentication credentials
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttrRequest) Reset() {
	*x = GetAttrRequest{}
	mi := &file_proto_nfs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttrRequest) ProtoMessage() {}

func (x *GetAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttrRequest.ProtoReflect.Descriptor instead.
func (*GetAttrRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{0}
}

func (x *GetAttrRequest) GetFileHandle() []byte {
	if x != nil {
		return x.FileHandle
	}
	return nil
}

func (x *GetAttrRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// GetAttrResponse contains the file attributes or an error
type GetAttrResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"` // Result status
	Attributes    *FileAttributes        `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`          // File attributes (if successful)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttrResponse) Reset() {
	*x = GetAttrResponse{}
	mi := &file_proto_nfs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttrResponse) ProtoMessage() {}

func (x *GetAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttrResponse.ProtoReflect.Descriptor instead.
func (*GetAttrResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{1}
}

func (x *GetAttrResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *GetAttrResponse) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// LookupRequest is used to look up a file name in a directory
type LookupRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DirectoryHandle []byte                 `protobuf:"bytes,1,opt,name=directory_handle,json=directoryHandle,proto3" json:"directory_handle,omitempty"` // Directory handle
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // Name to look up
	Credentials     *Credentials           `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`                                // Authentication credentials
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LookupRequest) Reset() {
	*x = LookupRequest{}
	mi := &file_proto_nfs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRequest) ProtoMessage() {}

func (x *LookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRequest.ProtoReflect.Descriptor instead.
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{2}
}

func (x *LookupRequest) GetDirectoryHandle() []byte {
	if x != nil {
		return x.DirectoryHandle
	}
	return nil
}

func (x *LookupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LookupRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// LookupResponse contains the result of a lookup operation
type LookupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"`                   // Result status
	FileHandle    []byte                 `protobuf:"bytes,2,opt,name=file_handle,json=fileHandle,proto3" json:"file_handle,omitempty"`          // File handle (if found)
	Attributes    *FileAttributes        `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`                            // File attributes (if found)
	DirAttributes *FileAttributes        `protobuf:"bytes,4,opt,name=dir_attributes,json=dirAttributes,proto3" json:"dir_attributes,omitempty"` // Directory attributes (if requested)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupResponse) Reset() {
	*x = LookupResponse{}
	mi := &file_proto_nfs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupResponse) ProtoMessage() {}

func (x *LookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupResponse.ProtoReflect.Descriptor instead.
func (*LookupResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{3}
}

func (x *LookupResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *LookupResponse) GetFileHandle() []byte {
	if x != nil {
		return x.FileHandle
	}
	return nil
}

func (x *LookupResponse) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *LookupResponse) GetDirAttributes() *FileAttributes {
	if x != nil {
		return x.DirAttributes
	}
	return nil
}

// ReadRequest is used to read from a file
type ReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHandle    []byte                 `protobuf:"bytes,1,opt,name=file_handle,json=fileHandle,proto3" json:"file_handle,omitempty"` // File handle
	Credentials   *Credentials           `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`                 // Authentication credentials
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                          // Starting offset
	Count         uint32                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`                            // Number of bytes to read
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_proto_nfs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{4}
}

func (x *ReadRequest) GetFileHandle() []byte {
	if x != nil {
		return x.FileHandle
	}
	return nil
}

func (x *ReadRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ReadRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// ReadResponse contains the result of a read operation
type ReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"` // Result status
	Attributes    *FileAttributes        `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`          // File attributes
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                      // Data read from file
	Eof           bool                   `protobuf:"varint,4,opt,name=eof,proto3" json:"eof,omitempty"`                       // End of file indicator
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_proto_nfs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{5}
}

func (x *ReadResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *ReadResponse) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ReadResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadResponse) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

// WriteRequest is used to write to a file
type WriteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHandle    []byte                 `protobuf:"bytes,1,opt,name=file_handle,json=fileHandle,proto3" json:"file_handle,omitempty"` // File handle
	Credentials   *Credentials           `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`                 // Authentication credentials
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                          // Starting offset
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                               // Data to write
	Stability     uint32                 `protobuf:"varint,5,opt,name=stability,proto3" json:"stability,omitempty"`                    // Requested stability level (0=UNSTABLE, 1=DATA_SYNC, 2=FILE_SYNC)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	mi := &file_proto_nfs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{6}
}

func (x *WriteRequest) GetFileHandle() []byte {
	if x != nil {
		return x.FileHandle
	}
	return nil
}

func (x *WriteRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *WriteRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WriteRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteRequest) GetStability() uint32 {
	if x != nil {
		return x.Stability
	}
	return 0
}

// WriteResponse contains the result of a write operation
type WriteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"` // Result status
	Attributes    *FileAttributes        `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`          // File attributes
	Count         uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                   // Number of bytes written
	Stability     uint32                 `protobuf:"varint,4,opt,name=stability,proto3" json:"stability,omitempty"`           // Stability level used
	Verifier      uint64                 `protobuf:"varint,5,opt,name=verifier,proto3" json:"verifier,omitempty"`             // Write verifier (used for cached writes)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	mi := &file_proto_nfs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{7}
}

func (x *WriteResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *WriteResponse) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *WriteResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WriteResponse) GetStability() uint32 {
	if x != nil {
		return x.Stability
	}
	return 0
}

func (x *WriteResponse) GetVerifier() uint64 {
	if x != nil {
		return x.Verifier
	}
	return 0
}

// ReadDirRequest is used to list directory entries
type ReadDirRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DirectoryHandle []byte                 `protobuf:"bytes,1,opt,name=directory_handle,json=directoryHandle,proto3" json:"directory_handle,omitempty"` // Directory handle
	Credentials     *Credentials           `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`                                // Authentication credentials
	Cookie          uint64                 `protobuf:"varint,3,opt,name=cookie,proto3" json:"cookie,omitempty"`                                         // Cookie from previous ReadDir
	CookieVerifier  uint64                 `protobuf:"varint,4,opt,name=cookie_verifier,json=cookieVerifier,proto3" json:"cookie_verifier,omitempty"`   // Cookie verifier
	Count           uint32                 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                           // Maximum number of entries to return
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReadDirRequest) Reset() {
	*x = ReadDirRequest{}
	mi := &file_proto_nfs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirRequest) ProtoMessage() {}

func (x *ReadDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirRequest.ProtoReflect.Descriptor instead.
func (*ReadDirRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{8}
}

func (x *ReadDirRequest) GetDirectoryHandle() []byte {
	if x != nil {
		return x.DirectoryHandle
	}
	return nil
}

func (x *ReadDirRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ReadDirRequest) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

func (x *ReadDirRequest) GetCookieVerifier() uint64 {
	if x != nil {
		return x.CookieVerifier
	}
	return 0
}

func (x *ReadDirRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// DirEntry represents a directory entry
type DirEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        uint64                 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` // File ID (inode number)
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                    // Entry name
	Cookie        uint64                 `protobuf:"varint,3,opt,name=cookie,proto3" json:"cookie,omitempty"`               // Cookie for next ReadDir
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirEntry) Reset() {
	*x = DirEntry{}
	mi := &file_proto_nfs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirEntry) ProtoMessage() {}

func (x *DirEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirEntry.ProtoReflect.Descriptor instead.
func (*DirEntry) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{9}
}

func (x *DirEntry) GetFileId() uint64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *DirEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirEntry) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

// ReadDirResponse contains the result of a ReadDir operation
type ReadDirResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"`                       // Result status
	CookieVerifier uint64                 `protobuf:"varint,2,opt,name=cookie_verifier,json=cookieVerifier,proto3" json:"cookie_verifier,omitempty"` // Verifier for cookie
	Entries        []*DirEntry            `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`                                      // List of directory entries
	Eof            bool                   `protobuf:"varint,4,opt,name=eof,proto3" json:"eof,omitempty"`                                             // End of directory indicator
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReadDirResponse) Reset() {
	*x = ReadDirResponse{}
	mi := &file_proto_nfs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirResponse) ProtoMessage() {}

func (x *ReadDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirResponse.ProtoReflect.Descriptor instead.
func (*ReadDirResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{10}
}

func (x *ReadDirResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *ReadDirResponse) GetCookieVerifier() uint64 {
	if x != nil {
		return x.CookieVerifier
	}
	return 0
}

func (x *ReadDirResponse) GetEntries() []*DirEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ReadDirResponse) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

// CreateRequest is used to create a new file
type CreateRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DirectoryHandle []byte                 `protobuf:"bytes,1,opt,name=directory_handle,json=directoryHandle,proto3" json:"directory_handle,omitempty"` // Directory handle
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // File name
	Credentials     *Credentials           `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`                                // Authentication credentials
	Attributes      *FileAttributes        `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`                                  // Initial file attributes
	Mode            CreateMode             `protobuf:"varint,5,opt,name=mode,proto3,enum=nfs.CreateMode" json:"mode,omitempty"`                         // Creation mode
	Verifier        uint64                 `protobuf:"varint,6,opt,name=verifier,proto3" json:"verifier,omitempty"`                                     // Used for EXCLUSIVE mode
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	mi := &file_proto_nfs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRequest) GetDirectoryHandle() []byte {
	if x != nil {
		return x.DirectoryHandle
	}
	return nil
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *CreateRequest) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateRequest) GetMode() CreateMode {
	if x != nil {
		return x.Mode
	}
	return CreateMode_UNCHECKED
}

func (x *CreateRequest) GetVerifier() uint64 {
	if x != nil {
		return x.Verifier
	}
	return 0
}

// CreateResponse contains the result of a Create operation
type CreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"`                   // Result status
	FileHandle    []byte                 `protobuf:"bytes,2,opt,name=file_handle,json=fileHandle,proto3" json:"file_handle,omitempty"`          // Handle for the new file
	Attributes    *FileAttributes        `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`                            // Attributes of the new file
	DirAttributes *FileAttributes        `protobuf:"bytes,4,opt,name=dir_attributes,json=dirAttributes,proto3" json:"dir_attributes,omitempty"` // Directory attributes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	mi := &file_proto_nfs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{12}
}

func (x *CreateResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *CreateResponse) GetFileHandle() []byte {
	if x != nil {
		return x.FileHandle
	}
	return nil
}

func (x *CreateResponse) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateResponse) GetDirAttributes() *FileAttributes {
	if x != nil {
		return x.DirAttributes
	}
	return nil
}

// MkdirRequest is used to create a new directory
type MkdirRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DirectoryHandle []byte                 `protobuf:"bytes,1,opt,name=directory_handle,json=directoryHandle,proto3" json:"directory_handle,omitempty"` // Directory handle
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // Directory name
	Credentials     *Credentials           `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`                                // Authentication credentials
	Attributes      *FileAttributes        `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`                                  // Initial directory attributes
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MkdirRequest) Reset() {
	*x = MkdirRequest{}
	mi := &file_proto_nfs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MkdirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirRequest) ProtoMessage() {}

func (x *MkdirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirRequest.ProtoReflect.Descriptor instead.
func (*MkdirRequest) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{13}
}

func (x *MkdirRequest) GetDirectoryHandle() []byte {
	if x != nil {
		return x.DirectoryHandle
	}
	return nil
}

func (x *MkdirRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MkdirRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *MkdirRequest) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// MkdirResponse contains the result of a Mkdir operation
type MkdirResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Status          Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=nfs.Status" json:"status,omitempty"`                         // Result status
	DirectoryHandle []byte                 `protobuf:"bytes,2,opt,name=directory_handle,json=directoryHandle,proto3" json:"directory_handle,omitempty"` // Handle for the new directory
	Attributes      *FileAttributes        `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`                                  // Attributes of the new directory
	DirAttributes   *FileAttributes        `protobuf:"bytes,4,opt,name=dir_attributes,json=dirAttributes,proto3" json:"dir_attributes,omitempty"`       // Parent directory attributes
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MkdirResponse) Reset() {
	*x = MkdirResponse{}
	mi := &file_proto_nfs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MkdirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MkdirResponse) ProtoMessage() {}

func (x *MkdirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_nfs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MkdirResponse.ProtoReflect.Descriptor instead.
func (*MkdirResponse) Descriptor() ([]byte, []int) {
	return file_proto_nfs_proto_rawDescGZIP(), []int{14}
}

func (x *MkdirResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_OK
}

func (x *MkdirResponse) GetDirectoryHandle() []byte {
	if x != nil {
		return x.DirectoryHandle
	}
	return nil
}

func (x *MkdirResponse) GetAttributes() *FileAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MkdirResponse) GetDirAttributes() *FileAttributes {
	if x != nil {
		return x.DirAttributes
	}
	return nil
}

var File_proto_nfs_proto protoreflect.FileDescriptor

var file_proto_nfs_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6e, 0x66, 0x73, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x6b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d,
	0x64, 0x69, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6f,
	0x66, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xc6, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x08, 0x44, 0x69, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x66, 0x73,
	0x2e, 0x44, 0x69, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x65, 0x6f, 0x66, 0x22, 0xf8, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x66, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e,
	0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0xc7, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0e, 0x64, 0x69, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x4d, 0x6b,
	0x64, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x69, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2a, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x55, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x32, 0xeb,
	0x02, 0x0a, 0x0a, 0x4e, 0x46, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x6e, 0x66, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x12, 0x2e,
	0x6e, 0x66, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x10,
	0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x6e,
	0x66, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x12, 0x13,
	0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x11, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x4d, 0x6b, 0x64, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x66, 0x73, 0x2e, 0x4d,
	0x6b, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2f, 0x6e, 0x66, 0x73, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_nfs_proto_rawDescOnce sync.Once
	file_proto_nfs_proto_rawDescData []byte
)

func file_proto_nfs_proto_rawDescGZIP() []byte {
	file_proto_nfs_proto_rawDescOnce.Do(func() {
		file_proto_nfs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_nfs_proto_rawDesc), len(file_proto_nfs_proto_rawDesc)))
	})
	return file_proto_nfs_proto_rawDescData
}

var file_proto_nfs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_nfs_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_nfs_proto_goTypes = []any{
	(CreateMode)(0),         // 0: nfs.CreateMode
	(*GetAttrRequest)(nil),  // 1: nfs.GetAttrRequest
	(*GetAttrResponse)(nil), // 2: nfs.GetAttrResponse
	(*LookupRequest)(nil),   // 3: nfs.LookupRequest
	(*LookupResponse)(nil),  // 4: nfs.LookupResponse
	(*ReadRequest)(nil),     // 5: nfs.ReadRequest
	(*ReadResponse)(nil),    // 6: nfs.ReadResponse
	(*WriteRequest)(nil),    // 7: nfs.WriteRequest
	(*WriteResponse)(nil),   // 8: nfs.WriteResponse
	(*ReadDirRequest)(nil),  // 9: nfs.ReadDirRequest
	(*DirEntry)(nil),        // 10: nfs.DirEntry
	(*ReadDirResponse)(nil), // 11: nfs.ReadDirResponse
	(*CreateRequest)(nil),   // 12: nfs.CreateRequest
	(*CreateResponse)(nil),  // 13: nfs.CreateResponse
	(*MkdirRequest)(nil),    // 14: nfs.MkdirRequest
	(*MkdirResponse)(nil),   // 15: nfs.MkdirResponse
	(*Credentials)(nil),     // 16: nfs.Credentials
	(Status)(0),             // 17: nfs.Status
	(*FileAttributes)(nil),  // 18: nfs.FileAttributes
}
var file_proto_nfs_proto_depIdxs = []int32{
	16, // 0: nfs.GetAttrRequest.credentials:type_name -> nfs.Credentials
	17, // 1: nfs.GetAttrResponse.status:type_name -> nfs.Status
	18, // 2: nfs.GetAttrResponse.attributes:type_name -> nfs.FileAttributes
	16, // 3: nfs.LookupRequest.credentials:type_name -> nfs.Credentials
	17, // 4: nfs.LookupResponse.status:type_name -> nfs.Status
	18, // 5: nfs.LookupResponse.attributes:type_name -> nfs.FileAttributes
	18, // 6: nfs.LookupResponse.dir_attributes:type_name -> nfs.FileAttributes
	16, // 7: nfs.ReadRequest.credentials:type_name -> nfs.Credentials
	17, // 8: nfs.ReadResponse.status:type_name -> nfs.Status
	18, // 9: nfs.ReadResponse.attributes:type_name -> nfs.FileAttributes
	16, // 10: nfs.WriteRequest.credentials:type_name -> nfs.Credentials
	17, // 11: nfs.WriteResponse.status:type_name -> nfs.Status
	18, // 12: nfs.WriteResponse.attributes:type_name -> nfs.FileAttributes
	16, // 13: nfs.ReadDirRequest.credentials:type_name -> nfs.Credentials
	17, // 14: nfs.ReadDirResponse.status:type_name -> nfs.Status
	10, // 15: nfs.ReadDirResponse.entries:type_name -> nfs.DirEntry
	16, // 16: nfs.CreateRequest.credentials:type_name -> nfs.Credentials
	18, // 17: nfs.CreateRequest.attributes:type_name -> nfs.FileAttributes
	0,  // 18: nfs.CreateRequest.mode:type_name -> nfs.CreateMode
	17, // 19: nfs.CreateResponse.status:type_name -> nfs.Status
	18, // 20: nfs.CreateResponse.attributes:type_name -> nfs.FileAttributes
	18, // 21: nfs.CreateResponse.dir_attributes:type_name -> nfs.FileAttributes
	16, // 22: nfs.MkdirRequest.credentials:type_name -> nfs.Credentials
	18, // 23: nfs.MkdirRequest.attributes:type_name -> nfs.FileAttributes
	17, // 24: nfs.MkdirResponse.status:type_name -> nfs.Status
	18, // 25: nfs.MkdirResponse.attributes:type_name -> nfs.FileAttributes
	18, // 26: nfs.MkdirResponse.dir_attributes:type_name -> nfs.FileAttributes
	1,  // 27: nfs.NFSService.GetAttr:input_type -> nfs.GetAttrRequest
	3,  // 28: nfs.NFSService.Lookup:input_type -> nfs.LookupRequest
	5,  // 29: nfs.NFSService.Read:input_type -> nfs.ReadRequest
	7,  // 30: nfs.NFSService.Write:input_type -> nfs.WriteRequest
	9,  // 31: nfs.NFSService.ReadDir:input_type -> nfs.ReadDirRequest
	12, // 32: nfs.NFSService.Create:input_type -> nfs.CreateRequest
	14, // 33: nfs.NFSService.Mkdir:input_type -> nfs.MkdirRequest
	2,  // 34: nfs.NFSService.GetAttr:output_type -> nfs.GetAttrResponse
	4,  // 35: nfs.NFSService.Lookup:output_type -> nfs.LookupResponse
	6,  // 36: nfs.NFSService.Read:output_type -> nfs.ReadResponse
	8,  // 37: nfs.NFSService.Write:output_type -> nfs.WriteResponse
	11, // 38: nfs.NFSService.ReadDir:output_type -> nfs.ReadDirResponse
	13, // 39: nfs.NFSService.Create:output_type -> nfs.CreateResponse
	15, // 40: nfs.NFSService.Mkdir:output_type -> nfs.MkdirResponse
	34, // [34:41] is the sub-list for method output_type
	27, // [27:34] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_proto_nfs_proto_init() }
func file_proto_nfs_proto_init() {
	if File_proto_nfs_proto != nil {
		return
	}
	file_proto_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_nfs_proto_rawDesc), len(file_proto_nfs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_nfs_proto_goTypes,
		DependencyIndexes: file_proto_nfs_proto_depIdxs,
		EnumInfos:         file_proto_nfs_proto_enumTypes,
		MessageInfos:      file_proto_nfs_proto_msgTypes,
	}.Build()
	File_proto_nfs_proto = out.File
	file_proto_nfs_proto_goTypes = nil
	file_proto_nfs_proto_depIdxs = nil
}
