syntax = "proto3";

package nfs;

option go_package = "github.com/example/nfsserver/pkg/api;api";

import "proto/common.proto";

// NFSService defines the NFS operations supported by the server
service NFSService {
  // Get file attributes
  rpc GetAttr(GetAttrRequest) returns (GetAttrResponse);
  
  // Look up a file name in a directory
  rpc Lookup(LookupRequest) returns (LookupResponse);
  
  // Read from a file
  rpc Read(ReadRequest) returns (ReadResponse);
  
  // Write to a file
  rpc Write(WriteRequest) returns (WriteResponse);

  // Read Directory
  rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);

  // Create a new file
  rpc Create(CreateRequest) returns (CreateResponse);

  // Create a new directory
  rpc Mkdir(MkdirRequest) returns (MkdirResponse);

  // GetRootHandle returns the file handle for the root directory
  rpc GetRootHandle(GetRootHandleRequest) returns (GetRootHandleResponse);
}

// GetAttrRequest is used to get file attributes
message GetAttrRequest {
  bytes file_handle = 1;     // File handle
  Credentials credentials = 2;   // Authentication credentials
}

// GetAttrResponse contains the file attributes or an error
message GetAttrResponse {
  Status status = 1;             // Result status
  FileAttributes attributes = 2;  // File attributes (if successful)
}

// LookupRequest is used to look up a file name in a directory
message LookupRequest {
  bytes directory_handle = 1;   // Directory handle
  string name = 2;             // Name to look up
  Credentials credentials = 3;  // Authentication credentials
}

// LookupResponse contains the result of a lookup operation
message LookupResponse {
  Status status = 1;              // Result status
  bytes file_handle = 2;          // File handle (if found)
  FileAttributes attributes = 3;   // File attributes (if found)
  FileAttributes dir_attributes = 4; // Directory attributes (if requested)
}

// ReadRequest is used to read from a file
message ReadRequest {
  bytes file_handle = 1;     // File handle
  Credentials credentials = 2;   // Authentication credentials
  uint64 offset = 3;         // Starting offset
  uint32 count = 4;          // Number of bytes to read
}

// ReadResponse contains the result of a read operation
message ReadResponse {
  Status status = 1;              // Result status
  FileAttributes attributes = 2;   // File attributes
  bytes data = 3;                // Data read from file
  bool eof = 4;                  // End of file indicator
}

// WriteRequest is used to write to a file
message WriteRequest {
  bytes file_handle = 1;     // File handle
  Credentials credentials = 2;   // Authentication credentials
  uint64 offset = 3;         // Starting offset
  bytes data = 4;            // Data to write
  uint32 stability = 5;      // Requested stability level (0=UNSTABLE, 1=DATA_SYNC, 2=FILE_SYNC)
}

// WriteResponse contains the result of a write operation
message WriteResponse {
  Status status = 1;              // Result status
  FileAttributes attributes = 2;   // File attributes
  uint32 count = 3;              // Number of bytes written
  uint32 stability = 4;          // Stability level used
  uint64 verifier = 5;           // Write verifier (used for cached writes)
}

// ReadDirRequest is used to list directory entries
message ReadDirRequest {
  bytes directory_handle = 1;   // Directory handle
  Credentials credentials = 2;   // Authentication credentials
  uint64 cookie = 3;           // Cookie from previous ReadDir 
  uint64 cookie_verifier = 4;   // Cookie verifier
  uint32 count = 5;            // Maximum number of entries to return
}

// DirEntry represents a directory entry
message DirEntry {
  uint64 file_id = 1;           // File ID (inode number)
  string name = 2;              // Entry name
  uint64 cookie = 3;            // Cookie for next ReadDir
}

// ReadDirResponse contains the result of a ReadDir operation
message ReadDirResponse {
  Status status = 1;              // Result status
  uint64 cookie_verifier = 2;     // Verifier for cookie
  repeated DirEntry entries = 3;  // List of directory entries
  bool eof = 4;                   // End of directory indicator
}

// CreateMode represents the file creation mode
enum CreateMode {
  UNCHECKED = 0;  // Create file, overwrite if exists
  GUARDED = 1;    // Create file, error if exists
  EXCLUSIVE = 2;  // Create file only if it does not exist
}

// CreateRequest is used to create a new file
message CreateRequest {
  bytes directory_handle = 1;     // Directory handle
  string name = 2;                // File name
  Credentials credentials = 3;     // Authentication credentials
  FileAttributes attributes = 4;   // Initial file attributes
  CreateMode mode = 5;            // Creation mode
  uint64 verifier = 6;            // Used for EXCLUSIVE mode
}

// CreateResponse contains the result of a Create operation
message CreateResponse {
  Status status = 1;                // Result status
  bytes file_handle = 2;            // Handle for the new file
  FileAttributes attributes = 3;     // Attributes of the new file
  FileAttributes dir_attributes = 4; // Directory attributes
}

// MkdirRequest is used to create a new directory
message MkdirRequest {
  bytes directory_handle = 1;     // Directory handle
  string name = 2;                // Directory name
  Credentials credentials = 3;     // Authentication credentials
  FileAttributes attributes = 4;   // Initial directory attributes
}

// MkdirResponse contains the result of a Mkdir operation
message MkdirResponse {
  Status status = 1;                // Result status
  bytes directory_handle = 2;       // Handle for the new directory
  FileAttributes attributes = 3;     // Attributes of the new directory
  FileAttributes dir_attributes = 4; // Parent directory attributes
}

// Request for getting root handle
message GetRootHandleRequest {
  Credentials credentials = 1;
}

// Response containing the root handle
message GetRootHandleResponse {
  Status status = 1;
  bytes file_handle = 2;
  FileAttributes attributes = 3;
}